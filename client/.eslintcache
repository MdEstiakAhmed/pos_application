[{"E:\\code\\projects\\pos_aaplication\\client\\src\\index.js":"1","E:\\code\\projects\\pos_aaplication\\client\\src\\reportWebVitals.js":"2","E:\\code\\projects\\pos_aaplication\\client\\src\\App.js":"3","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\navbar\\LeftBar.js":"4","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\navbar\\TopBar.js":"5","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\home\\Home.js":"6","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\addProduct\\AddProduct.js":"7","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\viewProduct\\ViewProduct.js":"8","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\salesRecord\\SalesRecord.js":"9","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\Sales.js":"10","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\dashboard\\Dashboard.js":"11","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\login\\Login.js":"12","E:\\code\\projects\\pos_aaplication\\client\\src\\reducers\\UserReducer.js":"13","E:\\code\\projects\\pos_aaplication\\client\\src\\route\\Routing.js":"14","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\alert\\Alert.js":"15","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\productForm\\ProductForm.js":"16","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Table.js":"17","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Filtering\\GlobalFiltering.js":"18","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Filtering\\ColumnFiltering.js":"19","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\TableColumn.js":"20","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\viewProduct\\productColumn.js":"21","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\updateProduct\\UpdateProduct.js":"22","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\ProductList.js":"23","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\CartItem.js":"24","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\ItemCount.js":"25","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\CartCalculate.js":"26","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\purchasePreview.js":"27","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\PurchasePreview.js":"28","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\ViewInvoice.js":"29","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\invoiceColumn.js":"30","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\UpdateInvoice.js":"31","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\InvoiceUpdateForm.js":"32","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\InvoicePage.js":"33"},{"size":500,"mtime":499162500000,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"35"},{"size":556,"mtime":1608048599454,"results":"37","hashOfConfig":"35"},{"size":1383,"mtime":1608034714852,"results":"38","hashOfConfig":"35"},{"size":940,"mtime":1608055140570,"results":"39","hashOfConfig":"35"},{"size":2009,"mtime":1608161962702,"results":"40","hashOfConfig":"35"},{"size":2746,"mtime":1608152090528,"results":"41","hashOfConfig":"35"},{"size":3744,"mtime":1608155094399,"results":"42","hashOfConfig":"35"},{"size":460,"mtime":1608035000475,"results":"43","hashOfConfig":"35"},{"size":4593,"mtime":1608158625108,"results":"44","hashOfConfig":"35"},{"size":445,"mtime":1608036506375,"results":"45","hashOfConfig":"35"},{"size":3557,"mtime":1608055145889,"results":"46","hashOfConfig":"35"},{"size":242,"mtime":1608047245390,"results":"47","hashOfConfig":"35"},{"size":2376,"mtime":1608156899953,"results":"48","hashOfConfig":"35"},{"size":532,"mtime":1608151462232,"results":"49","hashOfConfig":"35"},{"size":3645,"mtime":1608154934357,"results":"50","hashOfConfig":"35"},{"size":8251,"mtime":1608156979836,"results":"51","hashOfConfig":"35"},{"size":644,"mtime":1604492847331,"results":"52","hashOfConfig":"35"},{"size":433,"mtime":1604493656485,"results":"53","hashOfConfig":"35"},{"size":744,"mtime":1608104288370,"results":"54","hashOfConfig":"35"},{"size":486,"mtime":1608154946374,"results":"55","hashOfConfig":"35"},{"size":3687,"mtime":1608150890287,"results":"56","hashOfConfig":"35"},{"size":3006,"mtime":1608207500430,"results":"57","hashOfConfig":"35"},{"size":2527,"mtime":1608155804617,"results":"58","hashOfConfig":"35"},{"size":1300,"mtime":1608141606232,"results":"59","hashOfConfig":"35"},{"size":2565,"mtime":1608151459403,"results":"60","hashOfConfig":"35"},{"size":2139,"mtime":1608141739818,"results":"61","hashOfConfig":"35"},{"size":2139,"mtime":1608141739818,"results":"62","hashOfConfig":"35"},{"size":2674,"mtime":1608156905692,"results":"63","hashOfConfig":"35"},{"size":419,"mtime":1608147198177,"results":"64","hashOfConfig":"35"},{"size":3814,"mtime":1608150785527,"results":"65","hashOfConfig":"35"},{"size":1530,"mtime":1608151540634,"results":"66","hashOfConfig":"35"},{"size":5635,"mtime":1608158835174,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"1f427jf",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"70"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"70"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"70"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"70"},"E:\\code\\projects\\pos_aaplication\\client\\src\\index.js",[],["148","149"],"E:\\code\\projects\\pos_aaplication\\client\\src\\reportWebVitals.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\App.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\navbar\\LeftBar.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\navbar\\TopBar.js",["150"],"import React, { useContext } from 'react';\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport {UserContext} from '../../App';\r\n\r\nconst TopBar = () => {\r\n    const history = useHistory();\r\n    const {state, dispatch} = useContext(UserContext);\r\n    \r\n    const logoutHandle = () => {\r\n        localStorage.clear();\r\n        dispatch({type:\"CLEAR\"});\r\n        history.push('/login');\r\n    }\r\n    return (\r\n        <>\r\n            <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n                <Link className=\"navbar-brand col-sm-3 col-md-2 mr-0\" to=\"/\">POS Application</Link>\r\n                <ul className=\"navbar-nav px-3\">\r\n                    <li className=\"nav-item text-nowrap\">\r\n                        <button className=\"link-btn\" onClick={logoutHandle}>logout</button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TopBar;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\home\\Home.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\addProduct\\AddProduct.js",["151","152","153"],"import React, { useState } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {  useHistory } from 'react-router-dom';\r\nimport ProductForm from '../productForm/ProductForm';\r\nimport Alert from '../alert/Alert'\r\n\r\nconst AddProduct = () => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [formValue, setFormValue] = useState()\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n    const [loader, setLoader] = useState(false);\r\n    const history = useHistory();\r\n    \r\n    const onSubmit = data => {\r\n        setAlert({success: false, error: false, message: ''});\r\n        setLoader(true);\r\n        fetch('http://localhost:5000/product', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setAlert({success: true, error: false, message: data.message})\r\n                setLoader(false);\r\n                document.getElementById('productForm').reset();\r\n                history.push('/addProduct');\r\n            }\r\n            else{\r\n                setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">Add Product</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                {\r\n                    alert.success ?\r\n                    <Alert message={alert.message} status={true}/> :\r\n                    alert.error ?\r\n                    <Alert message={alert.message} status={false}/> :\r\n                    null\r\n                }\r\n                    <ProductForm value={''} register={register} errors={errors} handleSubmit={handleSubmit} onSubmit={onSubmit} loader={loader}/>\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddProduct;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\viewProduct\\ViewProduct.js",["154"],"import React, { useEffect, useState } from 'react';\r\nimport {  useHistory, useLocation } from 'react-router-dom';\r\nimport Table from '../table/Table';\r\nimport {ProductColumn} from './productColumn'\r\nimport Alert from '../alert/Alert'\r\n\r\nconst ViewProduct = () => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const [data, setData] = useState([]);\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [selectedData, setSelectedData] = useState([]);\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/product', {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setData(data.data);\r\n            }\r\n            else{\r\n                setData([]);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [refresh])\r\n\r\n    const handleUpdate = (obj) => {\r\n        history.push(`/upDateProduct/${obj._id}`);\r\n    }\r\n\r\n    const handleDelete = (id) => {\r\n        setAlert({success: false, error: false, message: ''});\r\n        fetch(`http://localhost:5000/product/${id}`, {\r\n            method: 'DELETE',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setAlert({success: true, error: false, message: data.message})\r\n                // setLoader(false);\r\n                setRefresh(!refresh)\r\n            }\r\n            else{\r\n                // setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            // setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">All Product</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                    {\r\n                        location.state && <Alert message={location.state.message} status={true}/>\r\n                    }\r\n                    {\r\n                        alert.success ?\r\n                        <Alert message={alert.message} status={true}/> :\r\n                        alert.error ?\r\n                        <Alert message={alert.message} status={false}/> :\r\n                        null\r\n                    }\r\n                    {\r\n                        data.length > 0 ?\r\n                        <Table column={ProductColumn} value={data} handleUpdate={handleUpdate} handleDelete={handleDelete} selectedData={false} setSelectedData={setSelectedData}/> :\r\n                        <p>no data found</p>\r\n                    }\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewProduct;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\salesRecord\\SalesRecord.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\Sales.js",["155"],"import React, {useState} from 'react';\r\nimport {  useHistory } from 'react-router-dom';\r\nimport CartCalculate from './createSale/CartCalculate';\r\nimport CartItem from './createSale/CartItem';\r\nimport ProductList from './createSale/ProductList';\r\nimport { useForm } from \"react-hook-form\";\r\nimport PurchasePreview from './createSale/PurchasePreview';\r\nimport Alert from '../alert/Alert'\r\n\r\nconst Sales = () => {\r\n    const history = useHistory();\r\n\r\n    const [cart, setCart] = useState([])\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [switchCart, setSwitchCart] = useState(false);\r\n\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [loader, setLoader] = useState(false);\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n\r\n    const onSubmit = data => {\r\n        let invoice = {\r\n            customerName: data.customerName,\r\n            product: [],\r\n            totalPrice: data.totalPrice,\r\n            paidAmount: data.payPrice,\r\n            dueAmount: data.totalPrice-data.payPrice\r\n        };\r\n        for(let i=0; i<cart.length; i++){\r\n            const obj = {\r\n                _id: cart[i]._id,\r\n                name: cart[i].name,\r\n                quantity: cart[i].count,\r\n                price: cart[i].salesPrice,\r\n                totalPrice: cart[i].count * cart[i].salesPrice,\r\n            }\r\n            invoice.product = [...invoice.product, obj]\r\n        }\r\n\r\n        setAlert({success: false, error: false, message: ''});\r\n        setLoader(true);\r\n\r\n        fetch('http://localhost:5000/invoice', {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(invoice),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setLoader(false);\r\n                setAlert({success: true, error: false, message: data.message});\r\n                history.push(`/invoiceInfo/${data.data._id}`);\r\n            }\r\n            else{\r\n                setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    }\r\n\r\n    const purchaseHandle = () => {\r\n        setSwitchCart(true)\r\n    }\r\n\r\n    const addMore =() => {\r\n        setSwitchCart(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">Sales</h1>\r\n                </div>\r\n                {\r\n                    alert.success ?\r\n                    <Alert message={alert.message} status={true}/> :\r\n                    alert.error ?\r\n                    <Alert message={alert.message} status={false}/> :\r\n                    null\r\n                }\r\n                {\r\n                    !switchCart ?\r\n                    <div className=\"container\">\r\n                        <ProductList cart={cart} setCart={setCart}/>\r\n                        <div className=\"row justify-content-between\">\r\n                            <div className=\"col-6\">\r\n                                <CartItem cart={cart} setCart={setCart}/>\r\n                            </div>\r\n                            <div className=\"col-4\">\r\n                                <CartCalculate cart={cart} setTotalCost={setTotalCost} purchaseHandle={purchaseHandle}/>\r\n                            </div>\r\n                        </div>\r\n                    </div> :\r\n                    <div className=\"container\">\r\n                        {\r\n                            totalCost > 0 ?\r\n                            <PurchasePreview totalCost={totalCost} register={register} errors={errors} handleSubmit={handleSubmit} onSubmit={onSubmit} loader={loader} addMore={addMore}/> :\r\n                            null\r\n                        }\r\n                    </div>\r\n\r\n                }\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Sales;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\dashboard\\Dashboard.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\login\\Login.js",["156","157"],"import React, { useState, useContext } from 'react';\r\nimport {  useHistory } from 'react-router-dom';\r\nimport { useForm } from \"react-hook-form\";\r\nimport Alert from '../alert/Alert'\r\nimport {UserContext} from '../../App';\r\nimport './Login.css'\r\n\r\nconst Login = () => {\r\n    const {state, dispatch} = useContext(UserContext);\r\n    const { register, handleSubmit, errors } = useForm();\r\n    const history = useHistory();\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n    const [loader, setLoader] = useState(false);\r\n\r\n    const onSubmit = data => {\r\n        setAlert({success: false, error: false, message: ''});\r\n        setLoader(true);\r\n        fetch('http://localhost:5000/auth/login', {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setAlert({success: true, error: false, message: data.message})\r\n                localStorage.setItem('jwt', JSON.stringify(data.token));\r\n                delete data.data.password;\r\n                localStorage.setItem('user', JSON.stringify(data.data));\r\n                dispatch({type: \"USER\", payload: data.data});\r\n                setLoader(false);\r\n                history.push('/');\r\n            }\r\n            else{\r\n                setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"text-center login-div\">\r\n                <div className=\"login-form\">\r\n                    <form className=\"form-signin\" onSubmit={handleSubmit(onSubmit)}>\r\n                        <h1 className=\"h3 mb-3 font-weight-normal\">Please sign in</h1>\r\n                        <label htmlFor=\"username\" className=\"sr-only\">Email address</label>\r\n                        <input type=\"text\" name=\"username\" id=\"username\" className=\"form-control my-2\" ref={register} placeholder=\"username\" required autoFocus />\r\n                        <label htmlFor=\"inputPassword\" className=\"sr-only\">Password</label>\r\n                        <input type=\"password\" name=\"password\" id=\"inputPassword\" className=\"form-control my-2\" ref={register} placeholder=\"Password\" required/>\r\n                        {\r\n                            loader ?\r\n                            <button className=\"btn btn-lg btn-primary btn-block my-2\" type=\"submit\">loading...</button> :\r\n                            <button className=\"btn btn-lg btn-primary btn-block my-2\" type=\"submit\">Sign in</button> \r\n                        }\r\n                        {\r\n                            alert.success ?\r\n                            <Alert message={alert.message} status={true}/> :\r\n                            alert.error ?\r\n                            <Alert message={alert.message} status={false}/> :\r\n                            null\r\n                        }\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Login;","E:\\code\\projects\\pos_aaplication\\client\\src\\reducers\\UserReducer.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\route\\Routing.js",["158","159","160"],"import React, { useEffect, useContext} from 'react';\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useHistory\r\n  } from \"react-router-dom\";\r\nimport {UserContext} from '../App';\r\n\r\nimport Dashboard from '../components/dashboard/Dashboard';\r\nimport Home from '../components/home/Home';\r\nimport AddProduct from '../components/addProduct/AddProduct'\r\nimport ViewProduct from \"../components/viewProduct/ViewProduct\";\r\nimport Sales from \"../components/sales/Sales\";\r\nimport SalesRecord from \"../components/salesRecord/SalesRecord\";\r\nimport Login from \"../components/login/Login\";\r\nimport UpdateProduct from '../components/updateProduct/UpdateProduct';\r\nimport ViewInvoice from '../components/invoice/ViewInvoice';\r\nimport UpdateInvoice from '../components/invoice/UpdateInvoice';\r\nimport InvoicePage from '../components/invoice/InvoicePage';\r\n\r\n\r\n\r\nconst Routing = () => {\r\n    const history = useHistory();\r\n    const {state, dispatch} = useContext(UserContext);\r\n  \r\n    useEffect(() => {\r\n      const user = JSON.parse(localStorage.getItem('user'));\r\n      if(user){\r\n        dispatch({type: \"USER\", payload: user});\r\n        history.push('/');\r\n      }\r\n      else{\r\n        history.push('/login');\r\n      }\r\n    }, [])\r\n\r\n    return(\r\n        <Switch>\r\n            <Route exact path=\"/login\">\r\n                <Login/>\r\n            </Route>\r\n            <Route exact path=\"/addProduct\">\r\n                <Dashboard children={<AddProduct/>}/>\r\n            </Route>\r\n            <Route exact path=\"/upDateProduct/:id\">\r\n                <Dashboard children={<UpdateProduct/>}/>\r\n            </Route>\r\n            <Route exact path=\"/viewProduct\">\r\n                <Dashboard children={<ViewProduct/>}/>\r\n            </Route>\r\n            <Route exact path=\"/sale\">\r\n                <Dashboard children={<Sales/>}/>\r\n            </Route>\r\n            <Route exact path=\"/saleRecord\">\r\n                <Dashboard children={<ViewInvoice/>}/>\r\n            </Route>\r\n            <Route exact path=\"/invoiceInfo/:id\">\r\n                <Dashboard children={<InvoicePage/>}/>\r\n            </Route>\r\n            <Route exact path=\"/updateInvoice/:id\">\r\n                <Dashboard children={<UpdateInvoice/>}/>\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n                <Dashboard children={<Home/>}/>\r\n            </Route>\r\n        </Switch>\r\n    );\r\n}\r\n\r\nexport default Routing;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\alert\\Alert.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\productForm\\ProductForm.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Table.js",["161","162","163"],"import React, { useMemo, useState, useEffect } from 'react';\r\nimport { useTable, useGlobalFilter, useSortBy, usePagination } from 'react-table';\r\nimport GlobalFiltering from './Filtering/GlobalFiltering';\r\nimport './table.css';\r\n\r\nconst Table = (props) => {\r\n    const { column, value, handleUpdate, handleDetails, handleDelete, selectedData, setSelectedData } = props;\r\n    const columns = useMemo(() => column, []);\r\n    const data = useMemo(() => value, [value]);\r\n\r\n    const tableInstance = useTable({\r\n        columns: columns,\r\n        data: data,\r\n        initialState: {\r\n            pageIndex: 0,\r\n            pageSize: 5\r\n        }\r\n    }, useGlobalFilter, useSortBy, usePagination);\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, page, nextPage, previousPage, canNextPage, canPreviousPage, pageOptions, gotoPage, pageCount, setPageSize, prepareRow, state, setGlobalFilter } = tableInstance;\r\n\r\n    const { globalFilter, pageIndex, pageSize } = state;\r\n\r\n\r\n\r\n    const handleAllCheckbox = () => {\r\n        let temp = [];\r\n        let checkboxes = document.getElementsByClassName('singleCheckbox');\r\n        if (document.getElementById('allCheckBox').checked) {\r\n            for (let i = 0; i < checkboxes.length; i++) {\r\n                checkboxes[i].checked = true;\r\n                temp.push(checkboxes[i].value);\r\n            }\r\n            setSelectedData(temp);\r\n        }\r\n        else {\r\n            for (let i = 0; i < checkboxes.length; i++) {\r\n                checkboxes[i].checked = false;\r\n            }\r\n            setSelectedData([]);\r\n        }\r\n    }\r\n\r\n    const handleSingleCheckbox = (id) => {\r\n        if (document.getElementById(id).checked) {\r\n            setSelectedData([...selectedData, id]);\r\n        }\r\n        else {\r\n            setSelectedData(selectedData.filter(item => item !== id));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row justify-content-between\">\r\n                <div className=\"col-4\"></div>\r\n                <div className=\"col-4 text-right\">\r\n                    <GlobalFiltering filter={globalFilter} setFilter={setGlobalFilter} />\r\n                </div>\r\n            </div>\r\n\r\n            <table {...getTableProps()} className=\"table mt-2\">\r\n                <thead className=\"thead-dark\">\r\n                    {\r\n                        headerGroups.map((headerGroup, index) => (\r\n                            <tr {...headerGroup.getHeaderGroupProps()} key={index}>\r\n                                {\r\n                                    selectedData ?\r\n                                    <th><input type=\"checkbox\" id=\"allCheckBox\" onClick={() => handleAllCheckbox()} /></th> :\r\n                                    null\r\n                                }\r\n                                {\r\n                                    headerGroup.headers.map((column) => (\r\n                                        <th {...column.getHeaderProps()}>\r\n                                            <div {...column.getSortByToggleProps()}>\r\n                                                {\r\n                                                    column.render('header')\r\n                                                }{' '}\r\n                                                {\r\n                                                    column.isSorted ?\r\n                                                        (column.isSortedDesc ? '⇧' : '⇩') :\r\n                                                        '⇳'\r\n                                                }\r\n                                            </div>\r\n                                        </th>\r\n                                    ))\r\n                                }\r\n                                <th>action</th>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {\r\n                        page.map((row, index) => {\r\n                            prepareRow(row)\r\n                            return (\r\n                                <tr {...row.getRowProps()} key={index}>\r\n                                    {\r\n                                        selectedData ?\r\n                                        <td><input type=\"checkbox\" className=\"singleCheckbox\" value={row.cells[0].row.values._id} onClick={() => handleSingleCheckbox(row.cells[0].row.values._id)} id={row.cells[0].row.values._id} /></td> :\r\n                                        null\r\n\r\n                                    }\r\n                                    {\r\n                                        row.cells.map((cell) => {\r\n                                            return (\r\n                                                <td {...cell.getCellProps()}>\r\n                                                    {\r\n                                                        cell.render('Cell')\r\n                                                    }\r\n                                                </td>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                    <td>\r\n                                        <button className=\"btn btn-primary btn-sm m-2\" onClick={() => handleUpdate(row.cells[0].row.values)}>update</button>\r\n                                        {\r\n                                            handleDetails ?\r\n                                            <button className=\"btn btn-primary btn-sm m-2\" onClick={() => handleDetails(row.cells[0].row.values._id)}>details</button> :\r\n                                            null\r\n                                        }\r\n                                        {\r\n                                            handleDelete ?\r\n                                            <button className=\"btn btn-primary btn-sm m-2\" onClick={() => handleDelete(row.cells[0].row.values._id)}>delete</button> :\r\n                                            null\r\n                                        }\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                    }\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className=\"row justify-content-between\">\r\n                <div className=\"col-4\">\r\n                    <div className=\"mb-3\">\r\n                        <span>\r\n                            Page{' '}\r\n                            <strong>\r\n                                {pageIndex + 1} of {pageOptions.length}\r\n                            </strong>{' '}\r\n                        </span>\r\n                        <select className=\"p-1 rounded\" value={pageSize} onChange={(e) => setPageSize(Number(e.target.value))}>\r\n                            {\r\n                                [5, 10, 20, 30].map((pageSize) => (\r\n                                    <option value={pageSize} key={pageSize}>{pageSize}</option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    <div className=\"mb-3\">\r\n                        <button className=\"btn btn-outline-primary ml-1\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n                        <button className=\"btn btn-primary ml-1\" onClick={() => previousPage()} disabled={!canPreviousPage}>previous</button>\r\n                        <button className=\"btn btn-primary ml-1\" onClick={() => nextPage()} disabled={!canNextPage}>next</button>\r\n                        <button className=\"btn btn-outline-primary ml-1\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {\r\n                pageOptions.map(page => (\r\n                    <button className=\"btn btn-outline-info m-1\" onClick={() => gotoPage(page)}>{page + 1}</button>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Table;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Filtering\\GlobalFiltering.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\Filtering\\ColumnFiltering.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\table\\TableColumn.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\viewProduct\\productColumn.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\updateProduct\\UpdateProduct.js",["164","165"],"import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {  useHistory, useParams } from 'react-router-dom';\r\nimport ProductForm from '../productForm/ProductForm';\r\nimport Alert from '../alert/Alert'\r\n\r\nconst UpdateProduct = () => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [formValue, setFormValue] = useState({})\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n    const [loader, setLoader] = useState(false);\r\n    const history = useHistory();\r\n\r\n    const {id} = useParams();\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/product/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setFormValue(data.data);\r\n            }\r\n            else{\r\n                setFormValue({});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [])\r\n    \r\n    const onSubmit = data => {\r\n        \r\n        setAlert({success: false, error: false, message: ''});\r\n        setLoader(true);\r\n        fetch(`http://localhost:5000/product/${id}`, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(data),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setAlert({success: true, error: false, message: data.message})\r\n                setLoader(false);\r\n                document.getElementById('productForm').reset();\r\n                history.push({pathname: '/viewProduct', state: {message: 'successfully update'}});\r\n            }\r\n            else{\r\n                setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">Update Product</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                {\r\n                    alert.success ?\r\n                    <Alert message={alert.message} status={true}/> :\r\n                    alert.error ?\r\n                    <Alert message={alert.message} status={false}/> :\r\n                    null\r\n                }\r\n                {\r\n                    Object.keys(formValue).length > 0 ?\r\n                    <ProductForm value={formValue} register={register} errors={errors} handleSubmit={handleSubmit} onSubmit={onSubmit} loader={loader}/> :\r\n                    <p>No product found.</p>\r\n                }\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateProduct;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\ProductList.js",["166"],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\CartItem.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\ItemCount.js",["167"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst ItemCount = (props) => {\r\n    const {id, max, cart, setCart} = props;\r\n    const [count, setCount] = useState(1)\r\n\r\n    useEffect(() => {\r\n        for(let i=0; i<cart.length; i++){\r\n            if(cart[i]._id === id){\r\n                setCount(cart[i].count);\r\n            }\r\n        }\r\n    }, [])\r\n    \r\n    const increment = () => {\r\n        if(max > count){\r\n            setCount(prevCount => prevCount + 1)\r\n            for(let i=0; i<cart.length; i++){\r\n                if(cart[i]._id === id){\r\n                    cart[i].count++;\r\n                }\r\n            }\r\n            setCart([...cart])\r\n        }\r\n    }\r\n\r\n    const decrement = () => {\r\n        if(count > 0){\r\n            setCount(prevCount => prevCount - 1)\r\n            for(let i=0; i<cart.length; i++){\r\n                if(cart[i]._id === id){\r\n                    cart[i].count--;\r\n                }\r\n            }\r\n            setCart([...cart])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"link-btn px-4 text-dark\" onClick={decrement}>-</button>\r\n            <strong>{count}</strong>\r\n            <button className=\"link-btn px-4 text-dark\" onClick={increment}>+</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ItemCount;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\CartCalculate.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\purchasePreview.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\sales\\createSale\\PurchasePreview.js",["168","169"],"import React, { useState, useEffect } from 'react';\r\n\r\nconst PurchasePreview = (props) => {\r\n    const { totalCost, register, errors, handleSubmit, onSubmit, loader, addMore } = props;\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form onSubmit={handleSubmit(onSubmit)} id=\"productForm\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"customerName\">Customer Name</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"customerName\" id=\"customerName\" ref={register({ required: true })} placeholder=\"customer name\" />\r\n                    <small id=\"emailHelp\" className=\"form-text text-danger\">{errors.customerName && \"invalid customer name\"}</small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"totalPrice\">Total Price</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"totalPrice\" id=\"totalPrice\" ref={register({ required: true, pattern: /^[0-9.]+$/ })} defaultValue={totalCost} placeholder=\"total Price\" />\r\n                    <small id=\"emailHelp\" className=\"form-text text-danger\">{errors.totalPrice && \"invalid total price\"}</small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"payPrice\">payable Price</label>\r\n                    <input type=\"text\" className=\"form-control\" name=\"payPrice\" id=\"payPrice\" ref={register({ required: true, pattern: /^[0-9.]+$/ })} defaultValue={totalCost} placeholder=\"payable Price\" />\r\n                    <small id=\"emailHelp\" className=\"form-text text-danger\">{errors.payPrice && \"invalid payment price\"}</small>\r\n                </div>\r\n\r\n                {\r\n                    loader ?\r\n                    <button className=\"btn btn-primary my-2\">loading...</button> :\r\n                    <button type=\"submit\" className=\"btn btn-primary my-2\">Submit</button>\r\n                }\r\n                <button className=\"btn btn-secondary m-2\" onClick={addMore}>add more</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PurchasePreview;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\ViewInvoice.js",["170","171","172","173","174"],"import React, { useEffect, useState } from 'react';\r\nimport {  useHistory, useLocation } from 'react-router-dom';\r\nimport Table from '../table/Table';\r\nimport {InvoiceColumn} from './invoiceColumn'\r\nimport Alert from '../alert/Alert'\r\n\r\nconst ViewInvoice = () => {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const [data, setData] = useState([]);\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [selectedData, setSelectedData] = useState([]);\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/invoice', {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setData(data.data);\r\n            }\r\n            else{\r\n                setData([]);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [refresh])\r\n\r\n    const handleUpdate = (obj) => {\r\n        history.push(`/updateInvoice/${obj._id}`);\r\n    }\r\n\r\n    const handleDetails = (id) => {\r\n        history.push(`/invoiceInfo/${id}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">sales record</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                    {/* {\r\n                        location.state && <Alert message={location.state.message} status={true}/>\r\n                    } */}\r\n                    {\r\n                        alert.success ?\r\n                        <Alert message={alert.message} status={true}/> :\r\n                        alert.error ?\r\n                        <Alert message={alert.message} status={false}/> :\r\n                        null\r\n                    }\r\n                    {\r\n                        data.length > 0 ?\r\n                        <Table column={InvoiceColumn} value={data} handleUpdate={handleUpdate} handleDetails={handleDetails} handleDelete={false} selectedData={false} setSelectedData={false}/> :\r\n                        <p>no data found</p>\r\n                    }\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewInvoice;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\invoiceColumn.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\UpdateInvoice.js",["175","176"],"import React, { useState, useEffect } from 'react';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {  useHistory, useParams } from 'react-router-dom';\r\nimport Alert from '../alert/Alert'\r\nimport InvoiceUpdateForm from './InvoiceUpdateForm';\r\n\r\nconst UpdateInvoice = () => {\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [formValue, setFormValue] = useState({})\r\n    const [alert, setAlert] = useState({success: false, error: false, message: ''});\r\n    const [loader, setLoader] = useState(false);\r\n    const history = useHistory();\r\n    const {id} = useParams();\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/invoice/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setFormValue(data.data);\r\n            }\r\n            else{\r\n                setFormValue({});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [])\r\n\r\n    const onSubmit = data => {\r\n\r\n        let obj = {\r\n            paidAmount: parseInt(formValue.paidAmount)+parseInt(data.dueAmount),\r\n            dueAmount: parseInt(formValue.dueAmount)-parseInt(data.dueAmount)\r\n        }\r\n        \r\n        setAlert({success: false, error: false, message: ''});\r\n        setLoader(true);\r\n        fetch(`http://localhost:5000/invoice/${id}`, {\r\n            method: 'PUT',\r\n            mode: 'cors',\r\n            cache: 'no-cache',\r\n            credentials: 'same-origin',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n            redirect: 'follow',\r\n            referrerPolicy: 'no-referrer',\r\n            body: JSON.stringify(obj),\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setAlert({success: true, error: false, message: data.message})\r\n                setLoader(false);\r\n                history.push({pathname: '/saleRecord', state: {message: 'successfully update'}});\r\n            }\r\n            else{\r\n                setLoader(false);\r\n                setAlert({success: false, error: true, message: data.message});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            setLoader(false);\r\n            setAlert({success: false, error: true, message: error.message});\r\n        })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">Update Product</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                {\r\n                    alert.success ?\r\n                    <Alert message={alert.message} status={true}/> :\r\n                    alert.error ?\r\n                    <Alert message={alert.message} status={false}/> :\r\n                    null\r\n                }\r\n                {\r\n                    Object.keys(formValue).length > 0 ?\r\n                    <InvoiceUpdateForm value={formValue} register={register} errors={errors} handleSubmit={handleSubmit} onSubmit={onSubmit} loader={loader}/> :\r\n                    <p>No product found.</p>\r\n                }\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateInvoice;","E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\InvoiceUpdateForm.js",[],"E:\\code\\projects\\pos_aaplication\\client\\src\\components\\invoice\\InvoicePage.js",["177","178"],"import React, {useState, useEffect} from 'react';\r\nimport {  useHistory, useParams } from 'react-router-dom';\r\n\r\nconst InvoicePage = () => {\r\n    const {id} = useParams();\r\n    const [invoiceInfo, setInvoiceInfo] = useState({})\r\n\r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/invoice/${id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + JSON.parse(localStorage.getItem('jwt'))\r\n            },\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            if(data.status){\r\n                setInvoiceInfo(data.data);\r\n            }\r\n            else{\r\n                setInvoiceInfo({});\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        })\r\n    }, [])\r\n\r\n    console.log(invoiceInfo)\r\n\r\n    return (\r\n        <>\r\n            <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n                <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom\">\r\n                    <h1 className=\"h2\">Invoice Details</h1>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"invoicePage\">\r\n                        <div className=\"card\">\r\n                            <div className=\"card-header\">\r\n                                <h2>Invoice</h2>\r\n                            </div>\r\n                            <div className=\"card-body\">\r\n                                <h3>{invoiceInfo.customerName}</h3>\r\n                                <h5>Invoice ID: {invoiceInfo._id}</h5>\r\n                                <br/>\r\n                                <hr/>\r\n                                <br/>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-3\">\r\n                                        <strong>id</strong>\r\n                                    </div>\r\n                                    <div className=\"col-3\">\r\n                                        <strong>product name</strong>\r\n                                    </div>\r\n                                    <div className=\"col-2 text-center\">\r\n                                        <strong>quantity</strong>\r\n                                    </div>\r\n                                    <div className=\"col-2 text-center\">\r\n                                        <strong>base price</strong>\r\n                                    </div>\r\n                                    <div className=\"col-2 text-right\">\r\n                                        <strong>total price</strong>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <hr/>\r\n\r\n                                {\r\n                                    invoiceInfo.product ?\r\n                                    invoiceInfo.product.map(item => {\r\n                                        return(\r\n                                            <div className=\"row my-2\">\r\n                                                <div className=\"col-3\">\r\n                                                    <strong>{item._id}</strong>\r\n                                                </div>\r\n                                                <div className=\"col-3\">\r\n                                                    <strong>{item.name}</strong>\r\n                                                </div>\r\n                                                <div className=\"col-2 text-center\">\r\n                                                    <strong>{item.quantity}</strong>\r\n                                                </div>\r\n                                                <div className=\"col-2 text-center\">\r\n                                                    <strong>{item.price}</strong>\r\n                                                </div>\r\n                                                <div className=\"col-2  text-right\">\r\n                                                    <strong>{item.totalPrice}</strong>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }) :\r\n                                    null\r\n                                }\r\n                            </div>\r\n                            <div className=\"card-footer\">\r\n                                <div className=\"row justify-content-end\">\r\n                                    <div className=\"col-4 text-right\">\r\n                                        <p><strong>Total Price: </strong></p>\r\n                                        <p><strong>Paid Price: </strong></p>\r\n                                        <p><strong>Due Price: </strong></p>\r\n                                    </div>\r\n                                    <div className=\"col-4 text-right\">\r\n                                        <p><strong>{invoiceInfo.totalPrice}</strong></p>\r\n                                        <p><strong>{invoiceInfo.paidAmount}</strong></p>\r\n                                        <p><strong>{invoiceInfo.dueAmount}</strong></p>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default InvoicePage;",{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":7,"column":12,"nodeType":"185","messageId":"186","endLine":7,"endColumn":17},{"ruleId":"183","severity":1,"message":"187","line":8,"column":37,"nodeType":"185","messageId":"186","endLine":8,"endColumn":42},{"ruleId":"183","severity":1,"message":"188","line":9,"column":12,"nodeType":"185","messageId":"186","endLine":9,"endColumn":21},{"ruleId":"183","severity":1,"message":"189","line":9,"column":23,"nodeType":"185","messageId":"186","endLine":9,"endColumn":35},{"ruleId":"183","severity":1,"message":"190","line":12,"column":12,"nodeType":"185","messageId":"186","endLine":12,"endColumn":24},{"ruleId":"183","severity":1,"message":"187","line":17,"column":37,"nodeType":"185","messageId":"186","endLine":17,"endColumn":42},{"ruleId":"183","severity":1,"message":"184","line":9,"column":12,"nodeType":"185","messageId":"186","endLine":9,"endColumn":17},{"ruleId":"183","severity":1,"message":"191","line":10,"column":37,"nodeType":"185","messageId":"186","endLine":10,"endColumn":43},{"ruleId":"183","severity":1,"message":"192","line":14,"column":8,"nodeType":"185","messageId":"186","endLine":14,"endColumn":19},{"ruleId":"183","severity":1,"message":"184","line":25,"column":12,"nodeType":"185","messageId":"186","endLine":25,"endColumn":17},{"ruleId":"193","severity":1,"message":"194","line":36,"column":8,"nodeType":"195","endLine":36,"endColumn":10,"suggestions":"196"},{"ruleId":"183","severity":1,"message":"197","line":1,"column":26,"nodeType":"185","messageId":"186","endLine":1,"endColumn":34},{"ruleId":"183","severity":1,"message":"198","line":1,"column":36,"nodeType":"185","messageId":"186","endLine":1,"endColumn":45},{"ruleId":"193","severity":1,"message":"199","line":8,"column":43,"nodeType":"195","endLine":8,"endColumn":45,"suggestions":"200"},{"ruleId":"183","severity":1,"message":"187","line":8,"column":37,"nodeType":"185","messageId":"186","endLine":8,"endColumn":42},{"ruleId":"193","severity":1,"message":"201","line":37,"column":8,"nodeType":"195","endLine":37,"endColumn":10,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":52,"column":44,"nodeType":"205","messageId":"206","endLine":52,"endColumn":46},{"ruleId":"193","severity":1,"message":"207","line":13,"column":8,"nodeType":"195","endLine":13,"endColumn":10,"suggestions":"208"},{"ruleId":"183","severity":1,"message":"197","line":1,"column":17,"nodeType":"185","messageId":"186","endLine":1,"endColumn":25},{"ruleId":"183","severity":1,"message":"198","line":1,"column":27,"nodeType":"185","messageId":"186","endLine":1,"endColumn":36},{"ruleId":"183","severity":1,"message":"209","line":9,"column":11,"nodeType":"185","messageId":"186","endLine":9,"endColumn":19},{"ruleId":"183","severity":1,"message":"210","line":11,"column":21,"nodeType":"185","messageId":"186","endLine":11,"endColumn":31},{"ruleId":"183","severity":1,"message":"190","line":12,"column":12,"nodeType":"185","messageId":"186","endLine":12,"endColumn":24},{"ruleId":"183","severity":1,"message":"211","line":12,"column":26,"nodeType":"185","messageId":"186","endLine":12,"endColumn":41},{"ruleId":"183","severity":1,"message":"212","line":13,"column":19,"nodeType":"185","messageId":"186","endLine":13,"endColumn":27},{"ruleId":"183","severity":1,"message":"187","line":8,"column":37,"nodeType":"185","messageId":"186","endLine":8,"endColumn":42},{"ruleId":"193","severity":1,"message":"201","line":36,"column":8,"nodeType":"195","endLine":36,"endColumn":10,"suggestions":"213"},{"ruleId":"183","severity":1,"message":"214","line":2,"column":11,"nodeType":"185","messageId":"186","endLine":2,"endColumn":21},{"ruleId":"193","severity":1,"message":"201","line":29,"column":8,"nodeType":"195","endLine":29,"endColumn":10,"suggestions":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'watch' is assigned a value but never used.","'formValue' is assigned a value but never used.","'setFormValue' is assigned a value but never used.","'selectedData' is assigned a value but never used.","'errors' is assigned a value but never used.","'SalesRecord' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["218"],"'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useMemo has a missing dependency: 'column'. Either include it or remove the dependency array.",["219"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["220"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'cart' and 'id'. Either include them or remove the dependency array.",["221"],"'location' is assigned a value but never used.","'setRefresh' is assigned a value but never used.","'setSelectedData' is assigned a value but never used.","'setAlert' is assigned a value but never used.",["222"],"'useHistory' is defined but never used.",["223"],"no-global-assign","no-unsafe-negation",{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"230","fix":"231"},{"desc":"228","fix":"232"},{"desc":"228","fix":"233"},"Update the dependencies array to be: [dispatch, history]",{"range":"234","text":"235"},"Update the dependencies array to be: [column]",{"range":"236","text":"237"},"Update the dependencies array to be: [id]",{"range":"238","text":"239"},"Update the dependencies array to be: [cart, id]",{"range":"240","text":"241"},{"range":"242","text":"239"},{"range":"243","text":"239"},[1208,1210],"[dispatch, history]",[413,415],"[column]",[1254,1256],"[id]",[355,357],"[cart, id]",[1251,1253],[884,886]]